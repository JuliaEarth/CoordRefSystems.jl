# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    Albers(lat‚Çí, lat‚ÇÅ, lat‚ÇÇ, Datum, Shift)
    Albers CRS with latitude origin lat‚Çí standard parallels `lat‚ÇÅ` and `lat‚ÇÇ`,  `Datum` and `Shift`.

## Examples

```julia
Albers(1, 1) # add default units
Albers(1m, 1m) # integers are converted converted to floats
Albers(1.0km, 1.0km) # length quantities are converted to meters
Albers(1.0m, 1.0m)
Albers{NAD83}(1.0m, 1.0m)
```

See [EPSG:5070](https://epsg.io/5070).
"""
struct Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M<:Met} <: Projected{Datum,Shift}
  x::M
  y::M
end

Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::M, y::M) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M<:Met} =
  Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,float(M)}(x, y)
Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::Met, y::Met) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(promote(x, y)...)
Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::Len, y::Len) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(uconvert(m, x), uconvert(m, y))
Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::Number, y::Number) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(addunit(x, m), addunit(y, m))

Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}(args...) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum} =
  Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift()}(args...)

Albers(args...) = Albers{NAD83}(args...)

Base.convert(
  ::Type{Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M}},
  coords::Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}
) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M} = Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M}(coords.x, coords.y)

constructor(::Type{<:Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}

lentype(::Type{<:Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M}}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M} = M

==(
  coords‚ÇÅ::Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift},
  coords‚ÇÇ::Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}
) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} = coords‚ÇÅ.x == coords‚ÇÇ.x && coords‚ÇÅ.y == coords‚ÇÇ.y

# ------------
# CONVERSIONS
# ------------

# Adapted from PROJ coordinate transformation software
# Initial PROJ 4.3 public domain code was put as Frank Warmerdam as copyright
# holder, but he didn't mean to imply he did the work. Essentially all work was
# done by Gerald Evenden.
# Authors of the original algorithm: Gerald Evenden and Thomas Knudsen
# reference code: https://github.com/OSGeo/PROJ/blob/master/src/projections/aea.cpp

inbounds(::Type{<:Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}}, Œª, œï) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum} =
  -œÄ ‚â§ Œª ‚â§ œÄ && deg2rad(90) ‚â§ œï ‚â§ deg2rad(90)

function formulas(::Type{<:Albers{Datum}}, ::Type{T}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,T}
  # Constants
  üåé = ellipsoid(Datum)
  e = T(eccentricity(üåé))
  a = numconvert(T, majoraxis(üåé))

  # Latitude origin
  œï‚ÇÄ = T(ustrip(deg2rad(lat‚Çí)))

  # Standard parallels
  œï‚ÇÅ = T(ustrip(deg2rad(lat‚ÇÅ)))
  œï‚ÇÇ = T(ustrip(deg2rad(lat‚ÇÇ)))


  m‚ÇÅ = hm(œï‚ÇÅ, e)
  m‚ÇÇ = hm(œï‚ÇÇ, e)
  Œ±‚ÇÅ = hŒ±(œï‚ÇÅ, e)
  Œ±‚ÇÇ = hŒ±(œï‚ÇÇ, e)
  Œ±‚ÇÄ = hŒ±(œï‚ÇÄ, e)
  n = (m‚ÇÅ^2 - m‚ÇÇ^2) / (Œ±‚ÇÇ - Œ±‚ÇÅ)
  C = m‚ÇÅ^2 + n * Œ±‚ÇÅ

  Œò = n * Œª
  œÅ = a * sqrt(C - n * hŒ±(œï, e)) / n
  if œÅ < 0
    throw(ArgumentError("coordinates outside of the projection domain"))
  end
  œÅ‚ÇÄ = (a * (C - n * Œ±‚ÇÄ))^0.5 / n
  function fx(Œª, œï)
    œÅ‚ÇÄ - œÅ * cos(Œò)
  end

  function fy(Œª, œï)
    œÅ * sin(Œò)
  end

  fx, fy
end

# backward projection formulas

function backward(::Type{<:Albers{Datum}}, x, y) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,T}
  üåé = ellipsoid(Datum)
  e = oftype(x, eccentricity(üåé))
  e¬≤ = oftype(x, eccentricity¬≤(üåé))
  œï‚ÇÄ, œï‚ÇÅ, œï‚ÇÇ = T.(ustrip.(deg2rad.(lat‚Çí, lat‚ÇÅ, lat‚ÇÇ)))
  Œ±‚ÇÄ = hŒ±(œï‚ÇÄ, e)
  œÅ‚ÇÄ = (a * (C - n * Œ±‚ÇÄ))^0.5 / n
  Œ±‚ÇÅ = hŒ±(œï‚ÇÅ, e)
  Œ±‚ÇÇ = hŒ±(œï‚ÇÇ, e)

  m‚ÇÅ = hm(œï‚ÇÅ, e)
  m‚ÇÇ = hm(œï‚ÇÇ, e)
  n = (m‚ÇÅ^2 - m‚ÇÇ^2) / (Œ±‚ÇÇ - Œ±‚ÇÅ)
  C = m‚ÇÅ^2 + n * Œ±‚ÇÅ

  Œ∏ = atan2(x, œÅ‚ÇÄ - y)
  œÅ = sqrt(x^2 + (œÅ‚ÇÄ - y)^2)
  Œ±‚Ä≤ = (C - (œÅ^2 * n^2) / a^2) / n
  Œ≤‚Ä≤ = asin(Œ±‚Ä≤ / (1 - (1 - e) / (2 * e) * log((1 - e) / (1 + e))))

  Œª = Œ∏ / n
  œï =
    Œ≤‚Ä≤ +
    (e^2 / 3 + 31 * e^4 / 180 + 517 * e^6 / 5040) * sin(2 * Œ≤‚Ä≤) +
    (23 * e^4 / 360 + 251 * e^6 / 3780) * sin(4 * Œ≤‚Ä≤) +
    (761 * e^6 / 45360) * sin(6 * Œ≤‚Ä≤)
  return Œª, œï
end
# ----------
# Helper functions
# ----------
function hm(œï, e)
  cos(œï) / sqrt(1 - e^2 * sin(œï)^2)
end
function hŒ±(œï, e)
  (1 - e^2) * (sin(œï) / (1 - e^2 * sin(œï)^2) - (1 / (2 * e)) * log((1 - e * sin(œï)) / (1 + e * sin(œï))))
end

# ----------
# FALLBACKS
# ----------

Base.convert(::Type{Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ}}, coords::CRS{Datum}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum} =
  convert(Albers{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}, coords)
