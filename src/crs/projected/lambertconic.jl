# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}

Lambert Conic Conformal CRS with latitude origin `lat‚Çí` standard parallels `lat‚ÇÅ` and `lat‚ÇÇ`,  `Datum` and `Shift`.
"""
struct LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M<:Met} <: Projected{Datum,Shift}
  x::M
  y::M
end

LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::M, y::M) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M<:Met} =
  LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,float(M)}(x, y)
LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::Met, y::Met) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(promote(x, y)...)
LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::Len, y::Len) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(uconvert(m, x), uconvert(m, y))
LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(x::Number, y::Number) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}(addunit(x, m), addunit(y, m))

LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}(args...) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum} = LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift()}(args...)

LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ}(args...) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ} = LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,WGS84Latest}(args...)

Base.convert(
  ::Type{LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M}},
  coords::LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}
) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M} = LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M}(coords.x, coords.y)

constructor(::Type{<:LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} =
  LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}

lentype(::Type{<:LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M}}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift,M} = M

==(
  coords‚ÇÅ::LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift},
  coords‚ÇÇ::LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift}
) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,Shift} = coords‚ÇÅ.x == coords‚ÇÇ.x && coords‚ÇÅ.y == coords‚ÇÇ.y

isconformal(::Type{<:LambertConic}) = true

# ------------
# CONVERSIONS
# ------------

# inbounds(::Type{<:LambertConic}, Œª, œï) = !(œï ‚âà -œÄ/2)
inbounds(::Type{<:LambertConic}, Œª, œï) = (-œÄ/2 < œï <= œÄ/2)

function formulas(::Type{<:LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}}, ::Type{T}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum,T}
  üåé = ellipsoid(Datum)
  e = T(eccentricity(üåé))
  e¬≤ = T(eccentricity¬≤(üåé))
  œï‚Çí = T(ustrip(deg2rad(lat‚Çí)))
  œï‚ÇÅ = T(ustrip(deg2rad(lat‚ÇÅ)))
  œï‚ÇÇ = T(ustrip(deg2rad(lat‚ÇÇ)))

  F, n = _lambertFn(œï‚ÇÅ, œï‚ÇÇ, e, e¬≤)
  
  Œ∏(Œª) = n * Œª
  t(œï) = _lambertt(œï, e)
  r(œï) = _lambertr(F, t(œï), n)
  
  t‚ÇÄ = _lambertt(œï‚Çí, e)
  r‚ÇÄ = _lambertr(F, t‚ÇÄ, n)

  fx(Œª, œï) = r(œï) * sin(Œ∏(Œª))

  fy(Œª, œï) = r‚ÇÄ - r(œï) * cos(Œ∏(Œª))

  fx, fy
end

# function backward(::Type{<:LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}}, x, y) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}
#   üåé = ellipsoid(Datum)
#   e = oftype(x, eccentricity(üåé))
#   e¬≤ = oftype(x, eccentricity¬≤(üåé))
#   œï‚Çí = oftype(x, ustrip(deg2rad(lat‚Çí)))
#   œï‚ÇÅ = oftype(x, ustrip(deg2rad(lat‚ÇÅ)))
#   œï‚ÇÇ = oftype(x, ustrip(deg2rad(lat‚ÇÇ)))

#   pi_half = oftype(x, œÄ/2)

#   F, n = _lambertFn(œï‚ÇÅ, œï‚ÇÇ, e, e¬≤)
#   t‚ÇÄ = _lambertt(œï‚Çí, e)
#   r‚ÇÄ = _lambertr(F, t‚ÇÄ, n)

#   Œ∏‚Ä≤ = atan(x, r‚ÇÄ - y)
#   r‚Ä≤ = sign(n) * sqrt(x^2 + (r‚ÇÄ - y)^2)
#   t‚Ä≤ = (r‚Ä≤/F)^(1/n)

#   Œª = Œ∏‚Ä≤ / n
#   œï·µ¢ = pi_half - 2 * atan(t‚Ä≤)
#   Œîœï = Inf - œï·µ¢
#   tol = 1e-16
#   n = 0
#   nmax = 1000
#   while (abs(Œîœï) > tol) && (n < nmax)
#     Œîœï = pi_half - 2 * atan(t‚Ä≤ * ((1 - e*sin(œï·µ¢)) / (1 + e*sin(œï·µ¢)))^(e/2)) - œï·µ¢
#     œï·µ¢ = œï·µ¢ + Œîœï
#     n = n + 1
#   end
#   Œª, œï·µ¢
# end

# -----------------
# HELPER FUNCTIONS
# -----------------

function _lambertFn(œï‚ÇÅ, œï‚ÇÇ, e, e¬≤)
  m‚ÇÅ = _lambertm(œï‚ÇÅ, e¬≤)
  m‚ÇÇ = _lambertm(œï‚ÇÇ, e¬≤)
  t‚ÇÅ = _lambertt(œï‚ÇÅ, e)
  t‚ÇÇ = _lambertt(œï‚ÇÇ, e)

  n = (log(m‚ÇÅ) - log(m‚ÇÇ)) / (log(t‚ÇÅ) - log(t‚ÇÇ))
  F = m‚ÇÅ / (n * t‚ÇÅ^n)
  F, n
end

_lambertm(œï, e¬≤) = cos(œï) / sqrt(1 - e¬≤ * sin(œï)^2)

_lambertt(œï, e) = tan(oftype(œï, œÄ/4) - œï/2) / ((1 - e * sin(œï)) / (1 + e * sin(œï)))^(e/2)

_lambertr(F, t, n) = F * t^n

# ----------
# FALLBACKS
# ----------

indomain(::Type{LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ}}, coords::CRS{Datum}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum} =
  indomain(LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}, coords)

Base.convert(::Type{LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ}}, coords::CRS{Datum}) where {lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum} =
  convert(LambertConic{lat‚Çí,lat‚ÇÅ,lat‚ÇÇ,Datum}, coords)
