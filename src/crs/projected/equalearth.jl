# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    EqualEarth(x, y)
    EqualEarth{Datum}(x, y)

Equal Earth coordinates in length units (default to meter)
with a given `Datum` (default to `WGS84`).

## Examples

```julia
EqualEarth(1, 1) # add default units
EqualEarth(1m, 1m) # integers are converted converted to floats
EqualEarth(1.0km, 1.0km) # length quantities are converted to meters
EqualEarth(1.0m, 1.0m)
EqualEarth{WGS84Latest}(1.0m, 1.0m)
```

See [Equal Earth projection](https://equal-earth.com/equal-earth-projection.html).
"""
struct EqualEarth{Datum,Shift,M<:Met} <: Projected{Datum,Shift}
  x::M
  y::M
end

EqualEarth{Datum,Shift}(x::M, y::M) where {Datum,Shift,M<:Met} = EqualEarth{Datum,Shift,float(M)}(x, y)
EqualEarth{Datum,Shift}(x::Met, y::Met) where {Datum,Shift} = EqualEarth{Datum,Shift}(promote(x, y)...)
EqualEarth{Datum,Shift}(x::Len, y::Len) where {Datum,Shift} = EqualEarth{Datum,Shift}(uconvert(m, x), uconvert(m, y))
EqualEarth{Datum,Shift}(x::Number, y::Number) where {Datum,Shift} =
  EqualEarth{Datum,Shift}(addunit(x, m), addunit(y, m))

EqualEarth{Datum}(args...) where {Datum} = EqualEarth{Datum,Shift()}(args...)

EqualEarth(args...) = EqualEarth{WGS84Latest}(args...)

Base.convert(::Type{EqualEarth{Datum,Shift,M}}, coords::EqualEarth{Datum,Shift}) where {Datum,Shift,M} =
  EqualEarth{Datum,Shift,M}(coords.x, coords.y)

constructor(::Type{<:EqualEarth{Datum,Shift}}) where {Datum,Shift} = EqualEarth{Datum,Shift}

lentype(::Type{<:EqualEarth{Datum,Shift,M}}) where {Datum,Shift,M} = M

==(coords‚ÇÅ::EqualEarth{Datum,Shift}, coords‚ÇÇ::EqualEarth{Datum,Shift}) where {Datum,Shift} =
  coords‚ÇÅ.x == coords‚ÇÇ.x && coords‚ÇÅ.y == coords‚ÇÇ.y

isequalarea(::Type{<:EqualEarth}) = true

# ------------
# CONVERSIONS
# ------------

# Adapted from PROJ coordinate transformation software
# Initial PROJ 4.3 public domain code was put as Frank Warmerdam as copyright
# holder, but he didn't mean to imply he did the work. Essentially all work was
# done by Gerald Evenden.

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/projections/eqearth.cpp
#                 https://github.com/d3/d3-geo/blob/main/src/projection/equalEarth.js
# reference formula: The Equal Earth map projection (https://doi.org/10.1080/13658816.2018.1504949)

const _EEA‚ÇÅ = 1.340264
const _EEA‚ÇÇ = -0.081106
const _EEA‚ÇÉ = 0.000893
const _EEA‚ÇÑ = 0.003796

function formulas(::Type{<:EqualEarth{Datum}}, ::Type{T}) where {Datum,T}
  üåé = ellipsoid(Datum)
  e = T(eccentricity(üåé))
  e¬≤ = T(eccentricity¬≤(üåé))
  ome¬≤ = 1 - e¬≤

  A‚ÇÅ = T(_EEA‚ÇÅ)
  A‚ÇÇ = T(_EEA‚ÇÇ)
  A‚ÇÉ = T(_EEA‚ÇÉ)
  A‚ÇÑ = T(_EEA‚ÇÑ)
  M = sqrt(T(3)) / T(2)

  q‚Çö = authq‚Çö(e, ome¬≤)
  Rq = sqrt(q‚Çö / 2)

  fŒ∏(Œ≤) = asin(M * sin(Œ≤))

  function fx(Œª, œï)
    q = authq(œï, e, ome¬≤)
    Œ≤ = geod2auth(q, q‚Çö)
    Œ∏ = fŒ∏(Œ≤)
    Œ∏¬≤ = Œ∏^2
    Œ∏‚Å∂ = Œ∏¬≤^3

    # spherical formulas using authalic coordinates
    x‚Çõ = (Œª * cos(Œ∏)) / (M * (A‚ÇÅ + 3 * A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (7 * A‚ÇÉ + 9 * A‚ÇÑ * Œ∏¬≤)))
    Rq * x‚Çõ # authalic radius
  end

  function fy(Œª, œï)
    q = authq(œï, e, ome¬≤)
    Œ≤ = geod2auth(q, q‚Çö)
    Œ∏ = fŒ∏(Œ≤)
    Œ∏¬≤ = Œ∏^2
    Œ∏‚Å∂ = Œ∏¬≤^3

    # spherical formulas using authalic coordinates
    y‚Çõ = Œ∏ * (A‚ÇÅ + A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (A‚ÇÉ + A‚ÇÑ * Œ∏¬≤))
    Rq * y‚Çõ # authalic radius
  end

  fx, fy
end

function forward(::Type{<:EqualEarth{Datum}}, Œª, œï) where {Datum}
  T = typeof(Œª)
  üåé = ellipsoid(Datum)
  e = T(eccentricity(üåé))
  e¬≤ = T(eccentricity¬≤(üåé))
  ome¬≤ = 1 - e¬≤

  A‚ÇÅ = T(_EEA‚ÇÅ)
  A‚ÇÇ = T(_EEA‚ÇÇ)
  A‚ÇÉ = T(_EEA‚ÇÉ)
  A‚ÇÑ = T(_EEA‚ÇÑ)
  M = sqrt(T(3)) / T(2)

  q‚Çö = authq‚Çö(e, ome¬≤)
  Rq = sqrt(q‚Çö / 2)

  q = authq(œï, e, ome¬≤)
  Œ≤ = geod2auth(q, q‚Çö)
  Œ∏ = asin(M * sin(Œ≤))
  Œ∏¬≤ = Œ∏^2
  Œ∏‚Å∂ = Œ∏¬≤^3

  # spherical formulas using authalic coordinates
  x‚Çõ = Œª * cos(Œ∏) / (M * (A‚ÇÅ + 3 * A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (7 * A‚ÇÉ + 9 * A‚ÇÑ * Œ∏¬≤)))
  y‚Çõ = Œ∏ * (A‚ÇÅ + A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (A‚ÇÉ + A‚ÇÑ * Œ∏¬≤))

  # authalic radius
  x = Rq * x‚Çõ
  y = Rq * y‚Çõ

  x, y
end

function backward(::Type{<:EqualEarth{Datum}}, x, y) where {Datum}
  T = typeof(x)
  üåé = ellipsoid(Datum)
  e = T(eccentricity(üåé))
  e¬≤ = T(eccentricity¬≤(üåé))
  ome¬≤ = 1 - e¬≤

  A‚ÇÅ = T(_EEA‚ÇÅ)
  A‚ÇÇ = T(_EEA‚ÇÇ)
  A‚ÇÉ = T(_EEA‚ÇÉ)
  A‚ÇÑ = T(_EEA‚ÇÑ)
  M = sqrt(T(3)) / T(2)

  q‚Çö = authq‚Çö(e, ome¬≤)
  Rq = sqrt(q‚Çö / 2)

  # authalic radius
  x‚Çõ = x / Rq
  y‚Çõ = y / Rq

  function fy‚Çõ(Œ∏)
    # to avoid variable capture
    local Œ∏¬≤ = Œ∏^2
    local Œ∏‚Å∂ = Œ∏¬≤^3

    Œ∏ * (A‚ÇÅ + A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (A‚ÇÉ + A‚ÇÑ * Œ∏¬≤))
  end

  function dfy‚Çõ(Œ∏)
    # to avoid variable capture
    local Œ∏¬≤ = Œ∏^2
    local Œ∏‚Å∂ = Œ∏¬≤^3

    A‚ÇÅ + 3 * A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (7 * A‚ÇÉ + 9 * A‚ÇÑ * Œ∏¬≤)
  end

  Œ∏ = newton(Œ∏ -> fy‚Çõ(Œ∏) - y‚Çõ, dfy‚Çõ, y‚Çõ)
  Œ≤ = asinclamp(sin(Œ∏) / M)
  Œ∏¬≤ = Œ∏^2
  Œ∏‚Å∂ = Œ∏¬≤^3

  œï = auth2geod(Œ≤, e¬≤)
  Œª = (x‚Çõ * M * (A‚ÇÅ + 3 * A‚ÇÇ * Œ∏¬≤ + Œ∏‚Å∂ * (7 * A‚ÇÉ + 9 * A‚ÇÑ * Œ∏¬≤))) / cos(Œ∏)

  Œª, œï
end

# ----------
# FALLBACKS
# ----------

indomain(::Type{EqualEarth}, coords::CRS{Datum}) where {Datum} = indomain(EqualEarth{Datum}, coords)

Base.convert(::Type{EqualEarth}, coords::CRS{Datum}) where {Datum} = convert(EqualEarth{Datum}, coords)
