# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    Geographic{Datum}

Geographic CRS with a given `Datum`.
"""
abstract type Geographic{Datum} <: CRS{Datum} end

ndims(::Type{<:Geographic}) = 3

# ----------------
# IMPLEMENTATIONS
# ----------------

include("geographic/geodetic.jl")
include("geographic/geocentric.jl")
include("geographic/authalic.jl")

# ------------
# CONVERSIONS
# ------------

# Adapted from PROJ coordinate transformation software
# Initial PROJ 4.3 public domain code was put as Frank Warmerdam as copyright
# holder, but he didn't mean to imply he did the work. Essentially all work was
# done by Gerald Evenden.

# AuthalicLatLon <> GeodeticLatLon

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/projections/healpix.cpp#L230
# reference formula: https://mathworld.wolfram.com/AuthalicLatitude.html

function Base.convert(::Type{AuthalicLatLon{Datum}}, coords::LatLon{Datum}) where {Datum}
  üåé = ellipsoid(Datum)
  œï = ustrip(deg2rad(coords.lat))
  e = oftype(œï, eccentricity(üåé))
  e¬≤ = oftype(œï, eccentricity¬≤(üåé))

  ome¬≤ = 1 - e¬≤
  sinœï = sin(œï)
  esinœï = e * sinœï
  q = ome¬≤ * (sinœï / (1 - esinœï^2) - (1 / 2e) * log((1 - esinœï) / (1 + esinœï)))
  # same formula as q, but œï = 90¬∞
  q‚Çö = ome¬≤ * (1 / ome¬≤ - (1 / 2e) * log((1 - e) / (1 + e)))
  qq‚Çö‚Åª¬π = q / q‚Çö

  if abs(qq‚Çö‚Åª¬π) > 1
    # rounding error
    qq‚Çö‚Åª¬π = sign(qq‚Çö‚Åª¬π)
  end

  Œ≤ = asin(qq‚Çö‚Åª¬π)
  AuthalicLatLon{Datum}(rad2deg(Œ≤) * ¬∞, coords.lon)
end

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/auth.cpp
# reference formula: https://mathworld.wolfram.com/AuthalicLatitude.html

function Base.convert(::Type{LatLon{Datum}}, coords::AuthalicLatLon{Datum}) where {Datum}
  Œ≤ = ustrip(deg2rad(coords.lat))
  e¬≤ = oftype(Œ≤, eccentricity¬≤(ellipsoid(Datum)))
  œï = auth2geod(Œ≤, e¬≤)
  LatLon{Datum}(phi2lat(œï), coords.lon)
end

# GeocentricLatLon <> GeodeticLatLon

# reference code: https://github.com/OSGeo/PROJ/blob/master/src/4D_api.cpp#L774

function Base.convert(::Type{GeocentricLatLon{Datum}}, coords::LatLon{Datum}) where {Datum}
  œï = ustrip(deg2rad(coords.lat))
  e¬≤ = oftype(œï, eccentricity¬≤(ellipsoid(Datum)))
  œï‚Ä≤ = atan((1 - e¬≤) * tan(œï))
  GeocentricLatLon{Datum}(rad2deg(œï‚Ä≤) * ¬∞, coords.lon)
end

function Base.convert(::Type{LatLon{Datum}}, coords::GeocentricLatLon{Datum}) where {Datum}
  œï‚Ä≤ = ustrip(deg2rad(coords.lat))
  e¬≤ = oftype(œï‚Ä≤, eccentricity¬≤(ellipsoid(Datum)))
  œï = atan(1 / (1 - e¬≤) * tan(œï‚Ä≤))
  LatLon{Datum}(phi2lat(œï), coords.lon)
end

# GeocentricLatLon <> GeodeticLatLonAlt

function Base.convert(::Type{GeocentricLatLon{Datum}}, coords::LatLonAlt{Datum}) where {Datum}
  ll = convert(LatLon, coords)
  convert(GeocentricLatLon{Datum}, ll)
end

function Base.convert(::Type{LatLonAlt{Datum}}, coords::GeocentricLatLon{Datum}) where {Datum}
  ll = convert(LatLon, coords)
  convert(LatLonAlt{Datum}, ll)
end

# GeocentricLatLonAlt <> GeodeticLatLonAlt

function Base.convert(::Type{GeocentricLatLonAlt{Datum}}, coords::LatLonAlt{Datum}) where {Datum}
  lla = convert(GeocentricLatLon, LatLon{Datum}(coords.lat, coords.lon))
  GeocentricLatLonAlt{Datum}(lla.lat, lla.lon, coords.alt)
end

function Base.convert(::Type{LatLonAlt{Datum}}, coords::GeocentricLatLonAlt{Datum}) where {Datum}
  lla = convert(LatLon, GeocentricLatLon{Datum}(coords.lat, coords.lon))
  LatLonAlt{Datum}(lla.lat, lla.lon, coords.alt)
end

# -----------------
# HELPER FUNCTIONS
# -----------------

const _P‚ÇÅ‚ÇÅ = 0.33333333333333333333 # 1 / 3
const _P‚ÇÅ‚ÇÇ = 0.17222222222222222222 # 31 / 180
const _P‚ÇÅ‚ÇÉ = 0.10257936507936507937 # 517 / 5040
const _P‚ÇÇ‚ÇÅ = 0.06388888888888888888 # 23 / 360
const _P‚ÇÇ‚ÇÇ = 0.06640211640211640212 # 251 / 3780
const _P‚ÇÉ‚ÇÅ = 0.01677689594356261023 # 761 / 45360

# convert authalic latitude Œ≤ to geodetic latitude œï
function auth2geod(Œ≤, e¬≤)
  e‚Å¥ = e¬≤^2
  e‚Å∂ = e¬≤^3
  P‚ÇÅ‚ÇÅ = oftype(Œ≤, _P‚ÇÅ‚ÇÅ)
  P‚ÇÅ‚ÇÇ = oftype(Œ≤, _P‚ÇÅ‚ÇÇ)
  P‚ÇÅ‚ÇÉ = oftype(Œ≤, _P‚ÇÅ‚ÇÉ)
  P‚ÇÇ‚ÇÅ = oftype(Œ≤, _P‚ÇÇ‚ÇÅ)
  P‚ÇÇ‚ÇÇ = oftype(Œ≤, _P‚ÇÇ‚ÇÇ)
  P‚ÇÉ‚ÇÅ = oftype(Œ≤, _P‚ÇÉ‚ÇÅ)
  Œ≤ + (P‚ÇÅ‚ÇÅ * e¬≤ + P‚ÇÅ‚ÇÇ * e‚Å¥ + P‚ÇÅ‚ÇÉ * e‚Å∂) * sin(2Œ≤) + (P‚ÇÇ‚ÇÅ * e‚Å¥ + P‚ÇÇ‚ÇÇ * e‚Å∂) * sin(4Œ≤) + (P‚ÇÉ‚ÇÅ * e‚Å∂) * sin(6Œ≤)
end
